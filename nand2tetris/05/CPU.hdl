// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU, two registers
 * named A and D, and a program counter named PC.  The CPU is designed to fetch
 * and execute instructions written in the Hack machine language. 

 * In particular, functions as follows: Executes the inputted instruction
 * according to the Hack machine language specification. The D and A in the
 * language specification refer to CPU-resident registers, while M refers to
 * the external memory location addressed by A, i.e. to Memory[A]. The inM
 * input holds the value of this location. If the current instruction needs to
 * write a value to M, the value is placed in outM, the address of the target
 * location is placed in the addressM output, and the writeM control bit is
 * asserted. (When writeM==0, any value may appear in outM). The outM and
 * writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they are
 * affected by the execution of the current instruction, they commit to their
 * new values only in the next time step. If reset==1 then the CPU jumps to
 * address 0 (i.e. pc is set to 0 in next time step) rather than to the address * resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* Most-significant bit determines what should go into A register. If i[15]
     * == 0, we have "A-instruction" and store instruction itself in the
     * register. If i[15] == 1, "C-instruction", we store the ALU output, which
     * is whatever is stored in the M-register. */
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=ARegIn);

    /* A-register. */
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=ARegIn, load=loadA, out=outRegA, out[0..14]=addressM);

    /* D-register. */
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outRegD);

    /* M-register (simply passes data from instruction further). */
    And(a=instruction[15], b=instruction[3], out=writeM);

    /* Select between M and A registers. */
    And(a=instruction[15], b=instruction[12], out=isMReg);
    Mux16(a=outRegA, b=inM, sel=isMReg, out=AorM);

    /* ALU */
    ALU(
        x=outRegD,
        y=AorM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU,
        out=outM,
        zr=zr,
        ng=ng
    );

    /* Based on the jump bits and zr & ng from ALU I can determine `loadPC`. We
     * pass `instruction[15]` into `in` here to avoid jumps in A-instruction. */
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=JNULL, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    Not(in=zr, out=noZR);
    Not(in=ng, out=noNG);
    DMux4Way(in=true, sel[0..0]=ng, sel[1..1]=zr, a=noNGnoZR, b=NGnoZR, c=noNGZR, d=NGZR);

    And(a=JGT, b=noNGnoZR, out=loadJGT);
    And(a=JEQ, b=zr, out=loadJEQ);
    And(a=JGE, b=noNG, out=loadJGE);
    And(a=JLT, b=NGnoZR, out=loadJLT);
    And(a=JNE, b=noZR, out=loadJNE);

    Or(a=ng, b=zr, out=isNotPositive);
    And(a=JLE, b=isNotPositive, out=loadJLE);

    Or8Way(
        in[0..0]=loadJGT,
        in[1..1]=loadJEQ,
        in[2..2]=loadJGE,
        in[3..3]=loadJLT,
        in[4..4]=loadJNE,
        in[5..5]=loadJLE,
        in[6..6]=JMP,
        in[7..7]=false, /* This is for JNULL */
        out=loadPC
    );

    PC(in=outRegA, inc=true, load=loadPC, reset=reset, out[0..14]=pc);
}
