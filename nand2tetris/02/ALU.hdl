// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /* We need to get 16-bit number filled with zeros. */

    /* Zero the inputs */
    Mux16(a=x, b=false, sel=zx, out=tx);
    Mux16(a=y, b=false, sel=zy, out=ty);

    /* Negate the inputs */
    Not16(in=tx, out=NOTtx);
    Not16(in=ty, out=NOTty);
    Mux16(a=tx, b=NOTtx, sel=nx, out=tnx);
    Mux16(a=ty, b=NOTty, sel=ny, out=tny);

    /* Apply the function */
    And16(a=tnx, b=tny, out=ANDxy);
    Add16(a=tnx, b=tny, out=ADDxy);
    Mux16(a=ANDxy, b=ADDxy, sel=f, out=fout);

    /* Negate the output */
    Not16(in=fout, out=notfout);

    Mux16(a=fout, b=notfout, sel=no, out=finalOut);

    /* Pipe local `finalOut` to chip's output `out` */
    Mux16(a=finalOut, b=false, sel=false, out=out);

    /* Determine if the result is 0. */
    /* We had a problem, our Or8Way chip doesn't accept 16 bit numbers, and we
    * cannot use `out` - because chip's out pins cannot be used in inputs, and
    * we cannot sub bus local `finalOut`. We should make 2 8 bit buses from a
    * single 16 bit number and we can do that with Mux16. */
    Mux16(a=finalOut, b=false, sel=false, out[0..7]=finalOut1, out[8..15]=finalOut2);

    /* Use those 2 8-bit buses to determine if the number is 0. */
    Or8Way(in=finalOut1, out=multiOr1);
    Or8Way(in=finalOut2, out=multiOr2);

    Or(a=multiOr1, b=multiOr2, out=notzr);
    Not(in=notzr, out=zr);

    /* Determine if the result is < 0 by extracting the most significant bit.
    * Equivalent to ng = finalOut[15] */
    Mux16(a=finalOut, b=finalOut, sel=false, out[15..15]=ng);
}
